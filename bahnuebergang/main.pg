model Bahnuebergang {

    faults {
        persistent BrakeFault # Bremse fällt aus
        persistent HodometerFault # Hodometer misst Position und Geschwindigkeit nicht mehr
        persistent BarrierMotorFault # Schrankenmotor fällt aus
        transient RadioInterferenceFault # Die Nachrichten der Funkkommunikation gehen verloren
        persistent CrossingRadioFault # Das Übergangsfunkmodul sendet und empfängt nicht
        persistent TrainRadioFault # Das Zugfunkmodul sendet und empfängt nicht 
        persistent BarrierOpenSensorFault # Meldet offen, obwohl nicht offen ist
        persistent BarrierClosedSensorFault  # Meldet geschlossen, obwohl nicht geschlossen ist
        transient TrainSensorFault # Fehldektektion: Zug wird als passiert erkannt, obwohl er es nicht ist
    }

    hazards {
        "Zug ungesichert auf Bahnuebergang" {
            position >= 0 & position < endOfCrossingPos & degreeLevel != 0
        }
        "Zug muss eine Notbremsung ausführen" {
            TrainControl = NBEP
        }
    }
    
    specify {
        "Wenn die Bremse aktiv ist, ist die Geschwindigkeit irgendwann 0" {
            G nofaults => G (Brake = BrakeActive => F (velocity = 0))
        }

        "Wenn die Bremse aktiviert wurde, bleibt sie aktiv" {
            G nofaults => G (Brake = BrakeActive => G (Brake = BrakeActive))
        }

        "Wenn der Bahnübergang nicht gesichert ist, kommt der Zug vor dem Gefahrenpunkt zum stehen" {
            G nofaults => G ((CrossingControl != Safe & TrainControl = BEP) => G (position < 0))
        }

        "Nach dem Schließen ist der Bahnübergang gesichert" {
            G nofaults => G (CrossingControl = Closing => F (CrossingControl = Safe))
        }

        "Wenn wir am Bremseinsatzpunkt sind, ist entweder der Übergang gesichert oder die Bremse aktiv" {
            G nofaults => G (TrainControl = BEP => (Brake = BrakeActive | BarrierClosedSensor = ClosedDetected))
        }

        "Wenn die Schranke geschlossen ist, ist sie irgendwann wieder offen" {
            G nofaults => G (BarrierClosedSensor = ClosedDetected => F (BarrierOpenSensor = OpenDetected))
        }

        "Wenn der Winkel bei 0 ist, ist die Anlage gesichert" {
            G nofaults => G ( X (degreeLevel = 0) & (BarrierMotor = Forward) => F (BarrierClosedSensor = ClosedDetected) & F (CrossingControl = Safe))
        }

        "Wenn der Zug den Sensor passiert hat, wird die Schranke geöffnet" {
            G nofaults => G (TrainSensor = TrainPassed => F (BarrierOpenSensor = OpenDetected))
        }

        "Der Zug schickt eine Nachricht, wenn er an AP angekommen ist" {
            G nofaults => F (TrainControl = AP => X (TrainRadioModule = Sending))
        }

        "Der Zug schickt eine Nachricht, wenn er an EP angekommen ist" {
            G nofaults => F (TrainControl = EP => X (TrainRadioModule = Sending))
        }

        "Wenn die Schranke ein Level vor geschlossen ist und geschlossen wird, ist sie im nächsten Schritt geschlossen" {
            G nofaults => G (degreeLevel = 1 & CrossingControl = Closing => X X (BarrierClosedSensor = ClosedDetected))
        }

        "Wenn die Schranke nciht bei 0 Grad ist, dann erkennt der Sensor, dass die Schranke nicht geschlossen ist" {
            G nofaults => G (degreeLevel != 0 => BarrierClosedSensor = ClosedNotDetected | X (BarrierClosedSensor = ClosedNotDetected))
        }

        "Der Schranken-Motor ist so lange aktiv, bis die Anlage geschlossen ist" {
            G nofaults => G( (BarrierMotor = Forward) => BarrierMotor = Forward U BarrierClosedSensor = ClosedDetected)
        }

        "Die Position der Schranke ist nie außerhalb des definierten Bereichs (Winkelbereich 0-6) " {
            G nofaults => G (degreeLevel >= 0 | degreeLevel <= 6)
        }

        "Der Hodometer hat immer die aktuelle Geschwindigkeit des Zugs" {
            # Es dauert ein Takt, bis der Hodometer die aktuelle Geschwindigkeit hat
            G nofaults => G (velocity - velocity_m <= a)
        }

        "Der Zug muss nie eine Notbremsung durchführen" {
            G nofaults => G (TrainControl != NBEP)
        }

        "Der Zug ist nie ungesichert auf den Bahübergang" {
            G nofaults => G !(TrainControl = GP & CrossingControl != Safe )
        }

    }
}