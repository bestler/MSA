graph TrainControl {

    vars {
        int c [3..3]
        int a [5..5]
        int z [3..3]
        int gp [0..0]
    }

    states {BeforeEP, EP, AP, BEP, NBEP, GP, SP}

    init: BeforeEP {
        c = 3 & 
        a = 5 &
        z = 3 &
        gp = 0
        }

    transitions {

        BeforeEP -> EP {
            guard { position_m > ((0 - z - ((velocity_m * velocity_m) / (2 * a)) ) - (velocity_m) * (t + c)) }
        }

        EP -> AP {
            guard { position_m > ((0 - z - ((velocity_m * velocity_m) / (2 * a)) ) - (2 * c * velocity_m)) & position_m < (0 - z - ((velocity_m * velocity_m) / (2 * a)) )}
        }

        AP -> BEP {
            guard { position_m > (0 - z - ((velocity_m * velocity_m) / (2 * a)) ) & position_m < gp }
        }

        BEP -> NBEP {
            guard { TrainRadioModule != Receiving }
        }

        BEP -> GP {
            guard { position_m = 0 }
        }

        GP -> SP {
            guard { TrainSensor = TrainPassed }
        }

    }
}
