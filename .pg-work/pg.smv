MODULE _VARS
    VAR
        V_Odometer : {L_Measuring};
        V_Brake : {L_BrakeInactive, L_BrakeActive};
        V_TrainControl : {L_SP, L_GP, L_NBEP, L_BEP, L_AP, L_EP, L_BeforeEP};
        V_TrainRadioModule : {L_Receiving, L_Sending, L_Idle};
        V_Train : {L_Drive};
        V_CrossingRadio : {L_Receiving, L_Sending, L_Idle};
        V_Barrier : {L_Exist};
        V_BarrierClosedSensor : {L_ClosedNotDetected, L_ClosedDetected};
        V_TrainSensor : {L_Timeout, L_TrainNotPassed, L_TrainPassed};
        V_CrossingControl : {L_Opening, L_Closing, L_NotSafe, L_Safe};
        V_BarrierOpenSensor : {L_OpenNotDetected, L_OpenDetected};
        V_BarrierMotor : {L_Backward, L_Forward, L_Idle};
        V_velocity_m : 0..44;
        V_position_m : -1000..1000;
        V_gp : {0};
        V_bep : -1000..0;
        V_ap : -1000..0;
        V_ep : -1000..0;
        V_z : 0..10;
        V_a : {0, 1};
        V_c : {0, 1, 2, 3};
        V_velocity : 0..44;
        V_position : -1000..1000;
        V_degreeLevel : 0..6;
        V_time : 0..500;
        V_t : {10};

MODULE _P_Odometer(v)
    INIT
        ( v.V_Odometer   =   L_Measuring   &   ( v.V_velocity_m   =   44   &   v.V_position_m   =   -1000 ) )
    TRANS
        ( ( v.V_Odometer = L_Measuring ) & ( next(v.V_Odometer) = L_Measuring ) & ( v.V_position   >=   -1000   &   v.V_position   <=   1000 ) & ( next(v.V_velocity_m) = v.V_velocity & next(v.V_position_m) = v.V_position ) ) | 
        (!(
        	( v.V_Odometer = L_Measuring ) & ( v.V_position   >=   -1000   &   v.V_position   <=   1000 ))
        	 & next(v.V_Odometer) = v.V_Odometer & next(v.V_velocity_m) = v.V_velocity_m & next(v.V_position_m) = v.V_position_m);

MODULE _P_Brake(v)
    INIT
        v.V_Brake   =   L_BrakeInactive
    TRANS
        ( ( v.V_Brake = L_BrakeActive ) & ( next(v.V_Brake) = L_BrakeActive ) & ( v.V_TrainControl   =   L_NBEP ) ) | 
        ( ( v.V_Brake = L_BrakeInactive ) & ( next(v.V_Brake) = L_BrakeActive ) & ( v.V_TrainControl   =   L_NBEP ) ) | 
        (!(
        	( v.V_Brake = L_BrakeActive ) & ( v.V_TrainControl   =   L_NBEP ) | 
        	( v.V_Brake = L_BrakeInactive ) & ( v.V_TrainControl   =   L_NBEP ))
        	 & next(v.V_Brake) = v.V_Brake);

MODULE _P_TrainControl(v)
    INIT
        ( v.V_TrainControl   =   L_BeforeEP   &   ( ( ( ( ( v.V_c   =   3   &   v.V_a   =   1 )   &   v.V_z   =   3 )   &   v.V_bep   =   ( ( 0   -   v.V_z )   -   ( ( v.V_velocity_m   *   v.V_velocity_m )   /   ( 2   *   v.V_a ) ) ) )   &   v.V_ap   =   ( v.V_bep   -   ( ( 2   *   v.V_c )   *   v.V_velocity_m ) ) )   &   v.V_ep   =   ( v.V_ap   -   ( v.V_velocity_m   *   ( v.V_t   +   v.V_c ) ) ) ) )
    TRANS
        ( ( v.V_TrainControl = L_GP ) & ( next(v.V_TrainControl) = L_SP ) & ( v.V_TrainSensor   =   L_TrainPassed ) & ( next(v.V_gp) = v.V_gp & next(v.V_bep) = v.V_bep & next(v.V_ap) = v.V_ap & next(v.V_ep) = v.V_ep & next(v.V_z) = v.V_z & next(v.V_a) = v.V_a & next(v.V_c) = v.V_c ) ) | 
        ( ( v.V_TrainControl = L_BEP ) & ( next(v.V_TrainControl) = L_GP ) & ( v.V_position_m   =   0 ) & ( next(v.V_gp) = v.V_gp & next(v.V_bep) = v.V_bep & next(v.V_ap) = v.V_ap & next(v.V_ep) = v.V_ep & next(v.V_z) = v.V_z & next(v.V_a) = v.V_a & next(v.V_c) = v.V_c ) ) | 
        ( ( v.V_TrainControl = L_BEP ) & ( next(v.V_TrainControl) = L_NBEP ) & ( v.V_TrainRadioModule   !=   L_Receiving ) & ( next(v.V_gp) = v.V_gp & next(v.V_bep) = v.V_bep & next(v.V_ap) = v.V_ap & next(v.V_ep) = v.V_ep & next(v.V_z) = v.V_z & next(v.V_a) = v.V_a & next(v.V_c) = v.V_c ) ) | 
        ( ( v.V_TrainControl = L_AP ) & ( next(v.V_TrainControl) = L_BEP ) & ( v.V_position_m   =   v.V_bep ) & ( next(v.V_gp) = v.V_gp & next(v.V_bep) = v.V_bep & next(v.V_ap) = v.V_ap & next(v.V_ep) = v.V_ep & next(v.V_z) = v.V_z & next(v.V_a) = v.V_a & next(v.V_c) = v.V_c ) ) | 
        ( ( v.V_TrainControl = L_EP ) & ( next(v.V_TrainControl) = L_AP ) & ( v.V_position_m   =   v.V_ap ) & ( next(v.V_gp) = v.V_gp & next(v.V_bep) = v.V_bep & next(v.V_ap) = v.V_ap & next(v.V_ep) = v.V_ep & next(v.V_z) = v.V_z & next(v.V_a) = v.V_a & next(v.V_c) = v.V_c ) ) | 
        ( ( v.V_TrainControl = L_BeforeEP ) & ( next(v.V_TrainControl) = L_EP ) & ( v.V_position_m   =   v.V_ep ) & ( next(v.V_gp) = v.V_gp & next(v.V_bep) = v.V_bep & next(v.V_ap) = v.V_ap & next(v.V_ep) = v.V_ep & next(v.V_z) = v.V_z & next(v.V_a) = v.V_a & next(v.V_c) = v.V_c ) ) | 
        (!(
        	( v.V_TrainControl = L_GP ) & ( v.V_TrainSensor   =   L_TrainPassed ) | 
        	( v.V_TrainControl = L_BEP ) & ( v.V_position_m   =   0 ) | 
        	( v.V_TrainControl = L_BEP ) & ( v.V_TrainRadioModule   !=   L_Receiving ) | 
        	( v.V_TrainControl = L_AP ) & ( v.V_position_m   =   v.V_bep ) | 
        	( v.V_TrainControl = L_EP ) & ( v.V_position_m   =   v.V_ap ) | 
        	( v.V_TrainControl = L_BeforeEP ) & ( v.V_position_m   =   v.V_ep ))
        	 & next(v.V_TrainControl) = v.V_TrainControl & next(v.V_gp) = v.V_gp & next(v.V_bep) = v.V_bep & next(v.V_ap) = v.V_ap & next(v.V_ep) = v.V_ep & next(v.V_z) = v.V_z & next(v.V_a) = v.V_a & next(v.V_c) = v.V_c);

MODULE _P_TrainRadioModule(v)
    INIT
        v.V_TrainRadioModule   =   L_Idle
    TRANS
        ( ( v.V_TrainRadioModule = L_Sending ) & ( next(v.V_TrainRadioModule) = L_Receiving ) & ( v.V_CrossingRadio   =   L_Sending ) ) | 
        ( ( v.V_TrainRadioModule = L_Sending ) & ( next(v.V_TrainRadioModule) = L_Sending ) & ( v.V_TrainControl   =   L_AP ) ) | 
        ( ( v.V_TrainRadioModule = L_Idle ) & ( next(v.V_TrainRadioModule) = L_Sending ) & ( v.V_TrainControl   =   L_EP ) ) | 
        (!(
        	( v.V_TrainRadioModule = L_Sending ) & ( v.V_CrossingRadio   =   L_Sending ) | 
        	( v.V_TrainRadioModule = L_Sending ) & ( v.V_TrainControl   =   L_AP ) | 
        	( v.V_TrainRadioModule = L_Idle ) & ( v.V_TrainControl   =   L_EP ))
        	 & next(v.V_TrainRadioModule) = v.V_TrainRadioModule);

MODULE _P_Train(v)
    INIT
        ( v.V_Train   =   L_Drive   &   ( v.V_velocity   =   44   &   v.V_position   =   -1000 ) )
    TRANS
        ( ( v.V_Train = L_Drive ) & ( next(v.V_Train) = L_Drive ) & ( ( v.V_velocity   -   v.V_a )   >=   0   &   ( v.V_velocity   -   v.V_a )   <=   44 ) & ( v.V_Brake   =   L_BrakeActive ) & ( next(v.V_velocity) = ( v.V_velocity   -   v.V_a ) ) & ( next(v.V_position) = v.V_position ) ) | 
        ( ( v.V_Train = L_Drive ) & ( next(v.V_Train) = L_Drive ) & ( ( v.V_position   +   v.V_velocity )   >=   -1000   &   ( v.V_position   +   v.V_velocity )   <=   1000 ) & ( next(v.V_position) = ( v.V_position   +   v.V_velocity ) ) & ( next(v.V_velocity) = v.V_velocity ) ) | 
        (!(
        	( v.V_Train = L_Drive ) & ( ( v.V_velocity   -   v.V_a )   >=   0   &   ( v.V_velocity   -   v.V_a )   <=   44 ) & ( v.V_Brake   =   L_BrakeActive ) | 
        	( v.V_Train = L_Drive ) & ( ( v.V_position   +   v.V_velocity )   >=   -1000   &   ( v.V_position   +   v.V_velocity )   <=   1000 ))
        	 & next(v.V_Train) = v.V_Train & next(v.V_velocity) = v.V_velocity & next(v.V_position) = v.V_position);

MODULE _P_CrossingRadio(v)
    INIT
        v.V_CrossingRadio   =   L_Idle
    TRANS
        ( ( v.V_CrossingRadio = L_Receiving ) & ( next(v.V_CrossingRadio) = L_Sending ) & ( v.V_CrossingControl   =   L_Safe ) ) | 
        ( ( v.V_CrossingRadio = L_Idle ) & ( next(v.V_CrossingRadio) = L_Receiving ) & ( v.V_TrainRadioModule   =   L_Sending ) ) | 
        (!(
        	( v.V_CrossingRadio = L_Receiving ) & ( v.V_CrossingControl   =   L_Safe ) | 
        	( v.V_CrossingRadio = L_Idle ) & ( v.V_TrainRadioModule   =   L_Sending ))
        	 & next(v.V_CrossingRadio) = v.V_CrossingRadio);

MODULE _P_Barrier(v)
    INIT
        ( v.V_Barrier   =   L_Exist   &   v.V_degreeLevel   =   6 )
    TRANS
        ( ( v.V_Barrier = L_Exist ) & ( next(v.V_Barrier) = L_Exist ) & ( ( v.V_degreeLevel   +   1 )   >=   0   &   ( v.V_degreeLevel   +   1 )   <=   6 ) & ( v.V_BarrierMotor   =   L_Backward ) & ( next(v.V_degreeLevel) = ( v.V_degreeLevel   +   1 ) ) ) | 
        ( ( v.V_Barrier = L_Exist ) & ( next(v.V_Barrier) = L_Exist ) & ( ( v.V_degreeLevel   -   1 )   >=   0   &   ( v.V_degreeLevel   -   1 )   <=   6 ) & ( v.V_BarrierMotor   =   L_Forward ) & ( next(v.V_degreeLevel) = ( v.V_degreeLevel   -   1 ) ) ) | 
        (!(
        	( v.V_Barrier = L_Exist ) & ( ( v.V_degreeLevel   +   1 )   >=   0   &   ( v.V_degreeLevel   +   1 )   <=   6 ) & ( v.V_BarrierMotor   =   L_Backward ) | 
        	( v.V_Barrier = L_Exist ) & ( ( v.V_degreeLevel   -   1 )   >=   0   &   ( v.V_degreeLevel   -   1 )   <=   6 ) & ( v.V_BarrierMotor   =   L_Forward ))
        	 & next(v.V_Barrier) = v.V_Barrier & next(v.V_degreeLevel) = v.V_degreeLevel);

MODULE _P_BarrierClosedSensor(v)
    INIT
        v.V_BarrierClosedSensor   =   L_ClosedNotDetected
    TRANS
        ( ( v.V_BarrierClosedSensor = L_ClosedNotDetected ) & ( next(v.V_BarrierClosedSensor) = L_ClosedDetected ) & ( v.V_degreeLevel   =   0 ) ) | 
        ( ( v.V_BarrierClosedSensor = L_ClosedDetected ) & ( next(v.V_BarrierClosedSensor) = L_ClosedNotDetected ) & ( v.V_degreeLevel   !=   0 ) ) | 
        (!(
        	( v.V_BarrierClosedSensor = L_ClosedNotDetected ) & ( v.V_degreeLevel   =   0 ) | 
        	( v.V_BarrierClosedSensor = L_ClosedDetected ) & ( v.V_degreeLevel   !=   0 ))
        	 & next(v.V_BarrierClosedSensor) = v.V_BarrierClosedSensor);

MODULE _P_TrainSensor(v)
    INIT
        ( v.V_TrainSensor   =   L_TrainNotPassed   &   v.V_time   =   0 )
    TRANS
        ( ( v.V_TrainSensor = L_TrainNotPassed ) & ( next(v.V_TrainSensor) = L_Timeout ) & ( v.V_time   =   500 ) & ( next(v.V_time) = v.V_time ) ) | 
        ( ( v.V_TrainSensor = L_TrainNotPassed ) & ( next(v.V_TrainSensor) = L_TrainNotPassed ) & ( ( v.V_time   +   1 )   >=   0   &   ( v.V_time   +   1 )   <=   500 ) & ( v.V_CrossingControl   =   L_Safe ) & ( next(v.V_time) = ( v.V_time   +   1 ) ) ) | 
        ( ( v.V_TrainSensor = L_TrainNotPassed ) & ( next(v.V_TrainSensor) = L_TrainPassed ) & ( 0   >=   0   &   0   <=   500 ) & ( v.V_position_m   =   5 ) & ( next(v.V_time) = 0 ) ) | 
        (!(
        	( v.V_TrainSensor = L_TrainNotPassed ) & ( v.V_time   =   500 ) | 
        	( v.V_TrainSensor = L_TrainNotPassed ) & ( ( v.V_time   +   1 )   >=   0   &   ( v.V_time   +   1 )   <=   500 ) & ( v.V_CrossingControl   =   L_Safe ) | 
        	( v.V_TrainSensor = L_TrainNotPassed ) & ( 0   >=   0   &   0   <=   500 ) & ( v.V_position_m   =   5 ))
        	 & next(v.V_TrainSensor) = v.V_TrainSensor & next(v.V_time) = v.V_time);

MODULE _P_CrossingControl(v)
    INIT
        ( v.V_CrossingControl   =   L_NotSafe   &   v.V_t   =   10 )
    TRANS
        ( ( v.V_CrossingControl = L_Safe ) & ( next(v.V_CrossingControl) = L_Opening ) & ( ( v.V_TrainSensor   =   L_TrainPassed   |   v.V_TrainSensor   =   L_Timeout ) ) & ( next(v.V_t) = v.V_t ) ) | 
        ( ( v.V_CrossingControl = L_Closing ) & ( next(v.V_CrossingControl) = L_Safe ) & ( ( v.V_BarrierClosedSensor   =   L_ClosedDetected   &   v.V_BarrierOpenSensor   !=   L_OpenDetected ) ) & ( next(v.V_t) = v.V_t ) ) | 
        ( ( v.V_CrossingControl = L_NotSafe ) & ( next(v.V_CrossingControl) = L_Closing ) & ( v.V_CrossingRadio   =   L_Receiving ) & ( next(v.V_t) = v.V_t ) ) | 
        (!(
        	( v.V_CrossingControl = L_Safe ) & ( ( v.V_TrainSensor   =   L_TrainPassed   |   v.V_TrainSensor   =   L_Timeout ) ) | 
        	( v.V_CrossingControl = L_Closing ) & ( ( v.V_BarrierClosedSensor   =   L_ClosedDetected   &   v.V_BarrierOpenSensor   !=   L_OpenDetected ) ) | 
        	( v.V_CrossingControl = L_NotSafe ) & ( v.V_CrossingRadio   =   L_Receiving ))
        	 & next(v.V_CrossingControl) = v.V_CrossingControl & next(v.V_t) = v.V_t);

MODULE _P_BarrierOpenSensor(v)
    INIT
        v.V_BarrierOpenSensor   =   L_OpenDetected
    TRANS
        ( ( v.V_BarrierOpenSensor = L_OpenNotDetected ) & ( next(v.V_BarrierOpenSensor) = L_OpenDetected ) & ( v.V_degreeLevel   =   6 ) ) | 
        ( ( v.V_BarrierOpenSensor = L_OpenDetected ) & ( next(v.V_BarrierOpenSensor) = L_OpenNotDetected ) & ( v.V_degreeLevel   !=   6 ) ) | 
        (!(
        	( v.V_BarrierOpenSensor = L_OpenNotDetected ) & ( v.V_degreeLevel   =   6 ) | 
        	( v.V_BarrierOpenSensor = L_OpenDetected ) & ( v.V_degreeLevel   !=   6 ))
        	 & next(v.V_BarrierOpenSensor) = v.V_BarrierOpenSensor);

MODULE _P_BarrierMotor(v)
    INIT
        v.V_BarrierMotor   =   L_Idle
    TRANS
        ( ( v.V_BarrierMotor = L_Backward ) & ( next(v.V_BarrierMotor) = L_Idle ) & ( v.V_CrossingControl   =   L_NotSafe ) ) | 
        ( ( v.V_BarrierMotor = L_Idle ) & ( next(v.V_BarrierMotor) = L_Backward ) & ( v.V_CrossingControl   =   L_Opening ) ) | 
        ( ( v.V_BarrierMotor = L_Forward ) & ( next(v.V_BarrierMotor) = L_Idle ) & ( v.V_CrossingControl   =   L_Safe ) ) | 
        ( ( v.V_BarrierMotor = L_Idle ) & ( next(v.V_BarrierMotor) = L_Forward ) & ( v.V_CrossingControl   =   L_Closing ) ) | 
        (!(
        	( v.V_BarrierMotor = L_Backward ) & ( v.V_CrossingControl   =   L_NotSafe ) | 
        	( v.V_BarrierMotor = L_Idle ) & ( v.V_CrossingControl   =   L_Opening ) | 
        	( v.V_BarrierMotor = L_Forward ) & ( v.V_CrossingControl   =   L_Safe ) | 
        	( v.V_BarrierMotor = L_Idle ) & ( v.V_CrossingControl   =   L_Closing ))
        	 & next(v.V_BarrierMotor) = v.V_BarrierMotor);

MODULE main
    VAR
        v : _VARS();
        p_Odometer : _P_Odometer(v);
        p_Brake : _P_Brake(v);
        p_TrainControl : _P_TrainControl(v);
        p_TrainRadioModule : _P_TrainRadioModule(v);
        p_Train : _P_Train(v);
        p_CrossingRadio : _P_CrossingRadio(v);
        p_Barrier : _P_Barrier(v);
        p_BarrierClosedSensor : _P_BarrierClosedSensor(v);
        p_TrainSensor : _P_TrainSensor(v);
        p_CrossingControl : _P_CrossingControl(v);
        p_BarrierOpenSensor : _P_BarrierOpenSensor(v);
        p_BarrierMotor : _P_BarrierMotor(v);


