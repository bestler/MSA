{"Bahnuebergang":{"components":[{"Odometer":{"states":["Measuring"],"variables":[{"velocity_m":{"range":"0..44","init":null}},{"position_m":{"range":"-1000..1000","init":null}}],"init":{"string":"(Odometer == Measuring && (velocity_m == 44 && position_m == -1000))","type":"pl"},"transitions":[{"Measuring -> Measuring":{"precon":{"string":"position >= -1000 && position <= 1000","type":"guard"},"guard":null,"action":{"string":"velocity_m := velocity; position_m := position","type":"action"}}}],"represents_fault":false}},{"Brake":{"states":["BrakeInactive","BrakeActive"],"variables":[],"init":{"string":"Brake == BrakeInactive","type":"pl"},"transitions":[{"BrakeActive -> BrakeActive":{"precon":null,"guard":{"string":"TrainControl == NBEP","type":"guard"},"action":null}},{"BrakeInactive -> BrakeActive":{"precon":null,"guard":{"string":"TrainControl == NBEP","type":"guard"},"action":null}}],"represents_fault":false}},{"TrainControl":{"states":["SP","GP","NBEP","BEP","AP","EP","BeforeEP"],"variables":[{"gp":{"range":"0..0","init":null}},{"bep":{"range":"-1000..0","init":null}},{"ap":{"range":"-1000..0","init":null}},{"ep":{"range":"-1000..0","init":null}},{"z":{"range":"0..10","init":null}},{"a":{"range":"0..1","init":null}},{"c":{"range":"0..3","init":null}}],"init":{"string":"(TrainControl == BeforeEP && (((((c == 3 && a == 1) && z == 3) && bep == ((0 - z) - ((velocity_m * velocity_m) / (2 * a)))) && ap == (bep - ((2 * c) * velocity_m))) && ep == (ap - (velocity_m * (t + c)))))","type":"pl"},"transitions":[{"GP -> SP":{"precon":null,"guard":{"string":"TrainSensor == TrainPassed","type":"guard"},"action":null}},{"BEP -> GP":{"precon":null,"guard":{"string":"position_m == 0","type":"guard"},"action":null}},{"BEP -> NBEP":{"precon":null,"guard":{"string":"TrainRadioModule != Receiving","type":"guard"},"action":null}},{"AP -> BEP":{"precon":null,"guard":{"string":"position_m == bep","type":"guard"},"action":null}},{"EP -> AP":{"precon":null,"guard":{"string":"position_m == ap","type":"guard"},"action":null}},{"BeforeEP -> EP":{"precon":null,"guard":{"string":"position_m == ep","type":"guard"},"action":null}}],"represents_fault":false}},{"TrainRadioModule":{"states":["Receiving","Sending","Idle"],"variables":[],"init":{"string":"TrainRadioModule == Idle","type":"pl"},"transitions":[{"Sending -> Receiving":{"precon":null,"guard":{"string":"CrossingRadio == Sending","type":"guard"},"action":null}},{"Sending -> Sending":{"precon":null,"guard":{"string":"TrainControl == AP","type":"guard"},"action":null}},{"Idle -> Sending":{"precon":null,"guard":{"string":"TrainControl == EP","type":"guard"},"action":null}}],"represents_fault":false}},{"Train":{"states":["Drive"],"variables":[{"velocity":{"range":"0..44","init":null}},{"position":{"range":"-1000..1000","init":null}}],"init":{"string":"(Train == Drive && (velocity == 44 && position == -1000))","type":"pl"},"transitions":[{"Drive -> Drive":{"precon":{"string":"(velocity - a) >= 0 && (velocity - a) <= 44","type":"guard"},"guard":{"string":"Brake == BrakeActive","type":"guard"},"action":{"string":"velocity := (velocity - a)","type":"action"}}},{"Drive -> Drive":{"precon":{"string":"(position + velocity) >= -1000 && (position + velocity) <= 1000","type":"guard"},"guard":null,"action":{"string":"position := (position + velocity)","type":"action"}}}],"represents_fault":false}},{"CrossingRadio":{"states":["Receiving","Sending","Idle"],"variables":[],"init":{"string":"CrossingRadio == Idle","type":"pl"},"transitions":[{"Receiving -> Sending":{"precon":null,"guard":{"string":"CrossingControl == Safe","type":"guard"},"action":null}},{"Idle -> Receiving":{"precon":null,"guard":{"string":"TrainRadioModule == Sending","type":"guard"},"action":null}}],"represents_fault":false}},{"Barrier":{"states":["Exist"],"variables":[{"degreeLevel":{"range":"0..6","init":null}}],"init":{"string":"(Barrier == Exist && degreeLevel == 6)","type":"pl"},"transitions":[{"Exist -> Exist":{"precon":{"string":"(degreeLevel + 1) >= 0 && (degreeLevel + 1) <= 6","type":"guard"},"guard":{"string":"BarrierMotor == Backward","type":"guard"},"action":{"string":"degreeLevel := (degreeLevel + 1)","type":"action"}}},{"Exist -> Exist":{"precon":{"string":"(degreeLevel - 1) >= 0 && (degreeLevel - 1) <= 6","type":"guard"},"guard":{"string":"BarrierMotor == Forward","type":"guard"},"action":{"string":"degreeLevel := (degreeLevel - 1)","type":"action"}}}],"represents_fault":false}},{"BarrierClosedSensor":{"states":["ClosedNotDetected","ClosedDetected"],"variables":[],"init":{"string":"BarrierClosedSensor == ClosedNotDetected","type":"pl"},"transitions":[{"ClosedNotDetected -> ClosedDetected":{"precon":null,"guard":{"string":"degreeLevel == 0","type":"guard"},"action":null}},{"ClosedDetected -> ClosedNotDetected":{"precon":null,"guard":{"string":"degreeLevel != 0","type":"guard"},"action":null}}],"represents_fault":false}},{"TrainSensor":{"states":["Timeout","TrainNotPassed","TrainPassed"],"variables":[{"time":{"range":"0..500","init":null}}],"init":{"string":"(TrainSensor == TrainNotPassed && time == 0)","type":"pl"},"transitions":[{"TrainNotPassed -> Timeout":{"precon":null,"guard":{"string":"time == 500","type":"guard"},"action":null}},{"TrainNotPassed -> TrainNotPassed":{"precon":{"string":"(time + 1) >= 0 && (time + 1) <= 500","type":"guard"},"guard":{"string":"CrossingControl == Safe","type":"guard"},"action":{"string":"time := (time + 1)","type":"action"}}},{"TrainNotPassed -> TrainPassed":{"precon":{"string":"0 >= 0 && 0 <= 500","type":"guard"},"guard":{"string":"position_m == 5","type":"guard"},"action":{"string":"time := 0","type":"action"}}}],"represents_fault":false}},{"CrossingControl":{"states":["Opening","Closing","NotSafe","Safe"],"variables":[{"t":{"range":"10..10","init":null}}],"init":{"string":"(CrossingControl == NotSafe && t == 10)","type":"pl"},"transitions":[{"Safe -> Opening":{"precon":null,"guard":{"string":"(TrainSensor == TrainPassed || TrainSensor == Timeout)","type":"guard"},"action":null}},{"Closing -> Safe":{"precon":null,"guard":{"string":"(BarrierClosedSensor == ClosedDetected && BarrierOpenSensor != OpenDetected)","type":"guard"},"action":null}},{"NotSafe -> Closing":{"precon":null,"guard":{"string":"CrossingRadio == Receiving","type":"guard"},"action":null}}],"represents_fault":false}},{"BarrierOpenSensor":{"states":["OpenNotDetected","OpenDetected"],"variables":[],"init":{"string":"BarrierOpenSensor == OpenDetected","type":"pl"},"transitions":[{"OpenNotDetected -> OpenDetected":{"precon":null,"guard":{"string":"degreeLevel == 6","type":"guard"},"action":null}},{"OpenDetected -> OpenNotDetected":{"precon":null,"guard":{"string":"degreeLevel != 6","type":"guard"},"action":null}}],"represents_fault":false}},{"BarrierMotor":{"states":["Backward","Forward","Idle"],"variables":[],"init":{"string":"BarrierMotor == Idle","type":"pl"},"transitions":[{"Backward -> Idle":{"precon":null,"guard":{"string":"CrossingControl == NotSafe","type":"guard"},"action":null}},{"Idle -> Backward":{"precon":null,"guard":{"string":"CrossingControl == Opening","type":"guard"},"action":null}},{"Forward -> Idle":{"precon":null,"guard":{"string":"CrossingControl == Safe","type":"guard"},"action":null}},{"Idle -> Forward":{"precon":null,"guard":{"string":"CrossingControl == Closing","type":"guard"},"action":null}}],"represents_fault":false}}],"hazards":[],"specification":[{"label":"Der Hodometer hat immer die aktuelle Geschwindigkeit des Zugs","expression":{"string":"G velocity == velocity_m","type":"tl"}},{"label":"Die Position der Schranke ist nie außerhalb des definierten Bereichs (Winkelbereich 0-6) ","expression":{"string":"G (degreeLevel >= 0 || degreeLevel <= 6)","type":"tl"}},{"label":"Der Schranken-Motor ist so lange aktiv, bis die Anlage geschlossen ist","expression":{"string":"G (BarrierMotor == Forward => (BarrierMotor == Forward U BarrierClosedSensor == ClosedDetected))","type":"tl"}},{"label":"Wenn die Schranke bei 0 Grad ist, dann sagt der Sensor, dass die Schranke geschlossen ist","expression":{"string":"G (degreeLevel != 0 => BarrierClosedSensor == ClosedNotDetected)","type":"tl"}},{"label":"Wenn die Schranke ein Level vor geschlossen ist und geschlossen wird, ist sie im nächsten Schritt geschlossen","expression":{"string":"G ((CrossingControl == Closing && degreeLevel == 1) => X BarrierClosedSensor == ClosedDetected)","type":"tl"}},{"label":"Der Zug schickt eine Nachricht, wenn er an BEP angekommen ist","expression":{"string":"G (TrainControl == BEP => X TrainRadioModule == Sending)","type":"tl"}},{"label":"Der Zug schickt eine Nachricht, wenn er an AP angekommen ist","expression":{"string":"G (TrainControl == AP => X TrainRadioModule == Sending)","type":"tl"}},{"label":"Wenn der Zug den Sensor passiert hat, wird die Schranke geöffnet","expression":{"string":"G (TrainSensor == TrainPassed => F BarrierOpenSensor == OpenDetected)","type":"tl"}},{"label":"Wenn der Zug sendet, empfängt die Übergangssteuerung","expression":{"string":"G (TrainRadioModule == Sending => F CrossingRadio == Receiving)","type":"tl"}},{"label":"Wenn der Winkel bei 0 ist, ist die Anlage gesichert","expression":{"string":"G (degreeLevel == 0 => CrossingControl == Safe)","type":"tl"}},{"label":"Wenn die Schranke geschlossen ist, ist sie irgendwann wieder offen","expression":{"string":"G (BarrierClosedSensor == ClosedDetected => F BarrierOpenSensor == OpenDetected)","type":"tl"}},{"label":"Wenn wir am Bremseinsatzpunkt sind, ist entweder der Übergang gesichert oder die Bremse aktiv","expression":{"string":"G (TrainControl == BEP => (Brake == BrakeActive || BarrierClosedSensor == ClosedDetected))","type":"tl"}},{"label":"Nach dem Schließen ist der Bahnübergang gesichert","expression":{"string":"G (CrossingControl == Closing => X CrossingControl == Safe)","type":"tl"}},{"label":"Wenn der Bahnübergang nicht gesichert ist, kommt der Zug vor dem Gefahrenpunkt zum stehen","expression":{"string":"G ((TrainRadioModule == Receiving && TrainControl == BEP) => G position > 0)","type":"tl"}},{"label":"Wenn die Bremse aktiviert wurde, bleibt sie aktiv","expression":{"string":"G (Brake == BrakeActive => G Brake == BrakeActive)","type":"tl"}},{"label":"Wenn die Bremse aktiv ist, ist die Geschwindigkeit irgendwann 0","expression":{"string":"G (Brake == BrakeActive => F velocity == 0)","type":"tl"}}]}}