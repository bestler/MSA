{"Bahnuebergang":{"components":[{"TrainSensorFault":{"states":["No","Yes"],"variables":[],"init":{"string":"TrainSensorFault == No","type":"pl"},"transitions":[{"No -> No":{"precon":null,"guard":null,"action":null}},{"No -> Yes":{"precon":null,"guard":null,"action":null}},{"Yes -> No":{"precon":null,"guard":null,"action":null}},{"Yes -> Yes":{"precon":null,"guard":null,"action":null}}],"represents_fault":true}},{"BarrierClosedSensorFault":{"states":["No","Yes"],"variables":[],"init":{"string":"BarrierClosedSensorFault == No","type":"pl"},"transitions":[{"No -> No":{"precon":null,"guard":null,"action":null}},{"No -> Yes":{"precon":null,"guard":null,"action":null}}],"represents_fault":true}},{"BarrierOpenSensorFault":{"states":["No","Yes"],"variables":[],"init":{"string":"BarrierOpenSensorFault == No","type":"pl"},"transitions":[{"No -> No":{"precon":null,"guard":null,"action":null}},{"No -> Yes":{"precon":null,"guard":null,"action":null}}],"represents_fault":true}},{"TrainRadioFault":{"states":["No","Yes"],"variables":[],"init":{"string":"TrainRadioFault == No","type":"pl"},"transitions":[{"No -> No":{"precon":null,"guard":null,"action":null}},{"No -> Yes":{"precon":null,"guard":null,"action":null}}],"represents_fault":true}},{"CrossingRadioFault":{"states":["No","Yes"],"variables":[],"init":{"string":"CrossingRadioFault == No","type":"pl"},"transitions":[{"No -> No":{"precon":null,"guard":null,"action":null}},{"No -> Yes":{"precon":null,"guard":null,"action":null}}],"represents_fault":true}},{"RadioInterferenceFault":{"states":["No","Yes"],"variables":[],"init":{"string":"RadioInterferenceFault == No","type":"pl"},"transitions":[{"No -> No":{"precon":null,"guard":null,"action":null}},{"No -> Yes":{"precon":null,"guard":null,"action":null}},{"Yes -> No":{"precon":null,"guard":null,"action":null}},{"Yes -> Yes":{"precon":null,"guard":null,"action":null}}],"represents_fault":true}},{"BarrierMotorFault":{"states":["No","Yes"],"variables":[],"init":{"string":"BarrierMotorFault == No","type":"pl"},"transitions":[{"No -> No":{"precon":null,"guard":null,"action":null}},{"No -> Yes":{"precon":null,"guard":null,"action":null}}],"represents_fault":true}},{"HodometerFault":{"states":["No","Yes"],"variables":[],"init":{"string":"HodometerFault == No","type":"pl"},"transitions":[{"No -> No":{"precon":null,"guard":null,"action":null}},{"No -> Yes":{"precon":null,"guard":null,"action":null}}],"represents_fault":true}},{"BrakeFault":{"states":["No","Yes"],"variables":[],"init":{"string":"BrakeFault == No","type":"pl"},"transitions":[{"No -> No":{"precon":null,"guard":null,"action":null}},{"No -> Yes":{"precon":null,"guard":null,"action":null}}],"represents_fault":true}},{"Odometer":{"states":["NotMesuaring","Measuring"],"variables":[{"velocity_m":{"range":"0..5","init":null}},{"position_m":{"range":"-300..50","init":null}}],"init":{"string":"(Odometer == Measuring && (velocity_m == 5 && position_m == -300))","type":"pl"},"transitions":[{"Measuring -> Measuring":{"precon":{"string":"position >= -300 && position <= 50","type":"guard"},"guard":{"string":"HodometerFault == No","type":"guard"},"action":{"string":"velocity_m := velocity; position_m := position","type":"action"}}}],"represents_fault":false}},{"RadioChannel":{"states":["Acknowledgment","StartSavingMessage","Empty"],"variables":[],"init":{"string":"RadioChannel == Empty","type":"pl"},"transitions":[{"StartSavingMessage -> Empty":{"precon":null,"guard":{"string":"CrossingRadioFault != No","type":"guard"},"action":null}},{"Empty -> Acknowledgment":{"precon":null,"guard":{"string":"(CrossingRadio == Sending && RadioInterferenceFault == No)","type":"guard"},"action":null}},{"StartSavingMessage -> Empty":{"precon":null,"guard":{"string":"(CrossingRadio == Receiving && RadioInterferenceFault == No)","type":"guard"},"action":null}},{"Empty -> StartSavingMessage":{"precon":null,"guard":{"string":"(TrainRadioModule == Sending && RadioInterferenceFault == No)","type":"guard"},"action":null}}],"represents_fault":false}},{"Brake":{"states":["BrakeInactive","BrakeActive"],"variables":[],"init":{"string":"Brake == BrakeInactive","type":"pl"},"transitions":[{"BrakeActive -> BrakeInactive":{"precon":null,"guard":{"string":"BrakeFault != No","type":"guard"},"action":null}},{"BrakeInactive -> BrakeActive":{"precon":null,"guard":{"string":"(TrainControl == NBEP && BrakeFault == No)","type":"guard"},"action":null}}],"represents_fault":false}},{"TrainControl":{"states":["SP","GP","NBEP","BEP","AP","EP","BeforeEP"],"variables":[{"gp":{"range":"0..0","init":null}},{"z":{"range":"20..20","init":null}},{"a":{"range":"1..1","init":null}},{"c":{"range":"5..5","init":null}}],"init":{"string":"(TrainControl == BeforeEP && (((c == 5 && a == 1) && z == 20) && gp == 0))","type":"pl"},"transitions":[{"GP -> SP":{"precon":null,"guard":{"string":"TrainSensor == TrainPassed","type":"guard"},"action":null}},{"NBEP -> GP":{"precon":null,"guard":{"string":"(position_m >= 0 && position_m < endOfCrossingPos)","type":"guard"},"action":null}},{"BEP -> GP":{"precon":null,"guard":{"string":"((position_m >= 0 && position_m < endOfCrossingPos) && TrainRadioModule == Receiving)","type":"guard"},"action":null}},{"BEP -> NBEP":{"precon":null,"guard":{"string":"((TrainRadioModule != Receiving && position_m < gp) && position_m > ((0 - z) - ((velocity_m * velocity_m) / (2 * a))))","type":"guard"},"action":null}},{"AP -> BEP":{"precon":null,"guard":{"string":"(position_m > ((0 - z) - ((velocity_m * velocity_m) / (2 * a))) && position_m < gp)","type":"guard"},"action":null}},{"EP -> AP":{"precon":null,"guard":{"string":"(position_m > (((0 - z) - ((velocity_m * velocity_m) / (2 * a))) - ((2 * c) * velocity_m)) && position_m < ((0 - z) - ((velocity_m * velocity_m) / (2 * a))))","type":"guard"},"action":null}},{"BeforeEP -> EP":{"precon":null,"guard":{"string":"position_m > (((0 - z) - ((velocity_m * velocity_m) / (2 * a))) - (velocity_m * (t + c)))","type":"guard"},"action":null}}],"represents_fault":false}},{"TrainRadioModule":{"states":["Receiving","Sending","Idle"],"variables":[{"counter":{"range":"0..2","init":null}}],"init":{"string":"(TrainRadioModule == Idle && counter == 0)","type":"pl"},"transitions":[{"Receiving -> Idle":{"precon":null,"guard":{"string":"TrainRadioFault != No","type":"guard"},"action":null}},{"Sending -> Idle":{"precon":null,"guard":{"string":"TrainRadioFault != No","type":"guard"},"action":null}},{"Idle -> Receiving":{"precon":null,"guard":{"string":"(((RadioChannel == Acknowledgment && TrainControl == AP) && counter == 2) && TrainRadioFault == No)","type":"guard"},"action":null}},{"Sending -> Idle":{"precon":null,"guard":{"string":"((RadioChannel == StartSavingMessage || RadioChannel == Acknowledgment) && TrainRadioFault == No)","type":"guard"},"action":null}},{"Idle -> Sending":{"precon":{"string":"(counter + 1) >= 0 && (counter + 1) <= 2","type":"guard"},"guard":{"string":"(((TrainControl == EP && counter == 0) || (TrainControl == AP && counter == 1)) && TrainRadioFault == No)","type":"guard"},"action":{"string":"counter := (counter + 1)","type":"action"}}}],"represents_fault":false}},{"Train":{"states":["Drive"],"variables":[{"velocity":{"range":"0..5","init":null}},{"position":{"range":"-300..50","init":null}}],"init":{"string":"(Train == Drive && (velocity == 5 && position == -300))","type":"pl"},"transitions":[{"Drive -> Drive":{"precon":{"string":"0 >= 0 && 0 <= 5","type":"guard"},"guard":{"string":"(Brake == BrakeActive && velocity <= a)","type":"guard"},"action":{"string":"velocity := 0","type":"action"}}},{"Drive -> Drive":{"precon":{"string":"(velocity - a) >= 0 && (velocity - a) <= 5","type":"guard"},"guard":{"string":"(Brake == BrakeActive && velocity > a)","type":"guard"},"action":{"string":"velocity := (velocity - a)","type":"action"}}},{"Drive -> Drive":{"precon":{"string":"(position + velocity) >= -300 && (position + velocity) <= 50","type":"guard"},"guard":{"string":"Brake == BrakeInactive","type":"guard"},"action":{"string":"position := (position + velocity)","type":"action"}}}],"represents_fault":false}},{"CrossingRadio":{"states":["Receiving","Sending","Idle"],"variables":[],"init":{"string":"CrossingRadio == Idle","type":"pl"},"transitions":[{"Receiving -> Idle":{"precon":null,"guard":{"string":"CrossingRadioFault != No","type":"guard"},"action":null}},{"Idle -> Sending":{"precon":null,"guard":{"string":"(CrossingControl == Safe && CrossingRadioFault == No)","type":"guard"},"action":null}},{"Receiving -> Idle":{"precon":null,"guard":{"string":"RadioChannel == Empty","type":"guard"},"action":null}},{"Idle -> Receiving":{"precon":null,"guard":{"string":"(RadioChannel == StartSavingMessage && CrossingRadioFault == No)","type":"guard"},"action":null}}],"represents_fault":false}},{"Barrier":{"states":["Exist"],"variables":[{"degreeLevel":{"range":"0..6","init":null}}],"init":{"string":"(Barrier == Exist && degreeLevel == 6)","type":"pl"},"transitions":[{"Exist -> Exist":{"precon":{"string":"(degreeLevel + 1) >= 0 && (degreeLevel + 1) <= 6","type":"guard"},"guard":{"string":"BarrierMotor == Backward","type":"guard"},"action":{"string":"degreeLevel := (degreeLevel + 1)","type":"action"}}},{"Exist -> Exist":{"precon":{"string":"(degreeLevel - 1) >= 0 && (degreeLevel - 1) <= 6","type":"guard"},"guard":{"string":"BarrierMotor == Forward","type":"guard"},"action":{"string":"degreeLevel := (degreeLevel - 1)","type":"action"}}}],"represents_fault":false}},{"BarrierClosedSensor":{"states":["ClosedNotDetected","ClosedDetected"],"variables":[],"init":{"string":"BarrierClosedSensor == ClosedNotDetected","type":"pl"},"transitions":[{"ClosedNotDetected -> ClosedDetected":{"precon":null,"guard":{"string":"BarrierClosedSensorFault != No","type":"guard"},"action":null}},{"ClosedNotDetected -> ClosedDetected":{"precon":null,"guard":{"string":"(degreeLevel == 0 && BarrierClosedSensorFault == No)","type":"guard"},"action":null}},{"ClosedDetected -> ClosedNotDetected":{"precon":null,"guard":{"string":"(degreeLevel != 0 && BarrierClosedSensorFault == No)","type":"guard"},"action":null}}],"represents_fault":false}},{"TrainSensor":{"states":["Timeout","TrainNotPassed","TrainPassed"],"variables":[{"endOfCrossingPos":{"range":"4..4","init":null}},{"time":{"range":"0..10","init":null}}],"init":{"string":"(TrainSensor == TrainNotPassed && (time == 0 && endOfCrossingPos == 4))","type":"pl"},"transitions":[{"TrainNotPassed -> TrainPassed":{"precon":null,"guard":{"string":"TrainSensorFault != No","type":"guard"},"action":null}},{"TrainNotPassed -> Timeout":{"precon":null,"guard":{"string":"(time == 50 && TrainSensorFault == No)","type":"guard"},"action":null}},{"TrainNotPassed -> TrainNotPassed":{"precon":{"string":"(time + 1) >= 0 && (time + 1) <= 10","type":"guard"},"guard":{"string":"((CrossingControl == Safe && position_m < endOfCrossingPos) && TrainSensorFault == No)","type":"guard"},"action":{"string":"time := (time + 1)","type":"action"}}},{"TrainNotPassed -> TrainPassed":{"precon":{"string":"0 >= 0 && 0 <= 10","type":"guard"},"guard":{"string":"(position_m >= endOfCrossingPos && TrainSensorFault == No)","type":"guard"},"action":{"string":"time := 0","type":"action"}}},{"TrainNotPassed -> TrainNotPassed":{"precon":null,"guard":{"string":"(position_m < endOfCrossingPos && TrainSensorFault == No)","type":"guard"},"action":null}}],"represents_fault":false}},{"CrossingControl":{"states":["Opening","Closing","NotSafe","Safe"],"variables":[{"t":{"range":"30..30","init":null}}],"init":{"string":"(CrossingControl == NotSafe && t == 30)","type":"pl"},"transitions":[{"Opening -> NotSafe":{"precon":null,"guard":{"string":"(BarrierOpenSensor == OpenDetected && BarrierClosedSensor != ClosedDetected)","type":"guard"},"action":null}},{"Safe -> Opening":{"precon":null,"guard":{"string":"(TrainSensor == TrainPassed || TrainSensor == Timeout)","type":"guard"},"action":null}},{"Closing -> Safe":{"precon":null,"guard":{"string":"(BarrierClosedSensor == ClosedDetected && BarrierOpenSensor != OpenDetected)","type":"guard"},"action":null}},{"NotSafe -> Closing":{"precon":null,"guard":{"string":"CrossingRadio == Receiving","type":"guard"},"action":null}}],"represents_fault":false}},{"BarrierOpenSensor":{"states":["OpenNotDetected","OpenDetected"],"variables":[],"init":{"string":"BarrierOpenSensor == OpenDetected","type":"pl"},"transitions":[{"OpenNotDetected -> OpenDetected":{"precon":null,"guard":{"string":"BarrierOpenSensorFault != No","type":"guard"},"action":null}},{"OpenNotDetected -> OpenDetected":{"precon":null,"guard":{"string":"(degreeLevel == 6 && BarrierOpenSensorFault == No)","type":"guard"},"action":null}},{"OpenDetected -> OpenNotDetected":{"precon":null,"guard":{"string":"(degreeLevel != 6 && BarrierOpenSensorFault == No)","type":"guard"},"action":null}}],"represents_fault":false}},{"BarrierMotor":{"states":["Backward","Forward","Idle"],"variables":[],"init":{"string":"BarrierMotor == Idle","type":"pl"},"transitions":[{"Backward -> Idle":{"precon":null,"guard":{"string":"BarrierMotorFault != No","type":"guard"},"action":null}},{"Forward -> Idle":{"precon":null,"guard":{"string":"BarrierMotorFault != No","type":"guard"},"action":null}},{"Backward -> Idle":{"precon":null,"guard":{"string":"CrossingControl == NotSafe","type":"guard"},"action":null}},{"Idle -> Backward":{"precon":null,"guard":{"string":"(CrossingControl == Opening && BarrierMotorFault == No)","type":"guard"},"action":null}},{"Forward -> Idle":{"precon":null,"guard":{"string":"CrossingControl == Safe","type":"guard"},"action":null}},{"Idle -> Forward":{"precon":null,"guard":{"string":"(CrossingControl == Closing && BarrierMotorFault == No)","type":"guard"},"action":null}}],"represents_fault":false}}],"hazards":[{"label":"Zug muss eine Notbremsung ausführen","expression":"TrainControl == NBEP"},{"label":"Zug ungesichert auf Bahnuebergang","expression":"((degreeLevel != 0 && position < endOfCrossingPos) && position >= 0)"}],"specification":[{"label":"Der Zug ist nie ungesichert auf den Bahübergang","expression":{"string":"(G (BarrierClosedSensorFault == No && (BarrierOpenSensorFault == No && (TrainRadioFault == No && (CrossingRadioFault == No && (RadioInterferenceFault == No && (BarrierMotorFault == No && (HodometerFault == No && (BrakeFault == No && TrainSensorFault == No)))))))) => G ! (CrossingControl != Safe && TrainControl == GP))","type":"tl"}},{"label":"Der Zug muss nie eine Notbremsung durchführen","expression":{"string":"(G (BarrierClosedSensorFault == No && (BarrierOpenSensorFault == No && (TrainRadioFault == No && (CrossingRadioFault == No && (RadioInterferenceFault == No && (BarrierMotorFault == No && (HodometerFault == No && (BrakeFault == No && TrainSensorFault == No)))))))) => G TrainControl != NBEP)","type":"tl"}},{"label":"Der Hodometer hat immer die aktuelle Geschwindigkeit des Zugs","expression":{"string":"(G (BarrierClosedSensorFault == No && (BarrierOpenSensorFault == No && (TrainRadioFault == No && (CrossingRadioFault == No && (RadioInterferenceFault == No && (BarrierMotorFault == No && (HodometerFault == No && (BrakeFault == No && TrainSensorFault == No)))))))) => G (velocity - velocity_m) <= a)","type":"tl"}},{"label":"Die Position der Schranke ist nie außerhalb des definierten Bereichs (Winkelbereich 0-6) ","expression":{"string":"(G (BarrierClosedSensorFault == No && (BarrierOpenSensorFault == No && (TrainRadioFault == No && (CrossingRadioFault == No && (RadioInterferenceFault == No && (BarrierMotorFault == No && (HodometerFault == No && (BrakeFault == No && TrainSensorFault == No)))))))) => G (degreeLevel >= 0 || degreeLevel <= 6))","type":"tl"}},{"label":"Der Schranken-Motor ist so lange aktiv, bis die Anlage geschlossen ist","expression":{"string":"(G (BarrierClosedSensorFault == No && (BarrierOpenSensorFault == No && (TrainRadioFault == No && (CrossingRadioFault == No && (RadioInterferenceFault == No && (BarrierMotorFault == No && (HodometerFault == No && (BrakeFault == No && TrainSensorFault == No)))))))) => G (BarrierMotor == Forward => (BarrierMotor == Forward U BarrierClosedSensor == ClosedDetected)))","type":"tl"}},{"label":"Wenn die Schranke nciht bei 0 Grad ist, dann erkennt der Sensor, dass die Schranke nicht geschlossen ist","expression":{"string":"(G (BarrierClosedSensorFault == No && (BarrierOpenSensorFault == No && (TrainRadioFault == No && (CrossingRadioFault == No && (RadioInterferenceFault == No && (BarrierMotorFault == No && (HodometerFault == No && (BrakeFault == No && TrainSensorFault == No)))))))) => G (degreeLevel != 0 => (BarrierClosedSensor == ClosedNotDetected || X BarrierClosedSensor == ClosedNotDetected)))","type":"tl"}},{"label":"Wenn die Schranke ein Level vor geschlossen ist und geschlossen wird, ist sie im nächsten Schritt geschlossen","expression":{"string":"(G (BarrierClosedSensorFault == No && (BarrierOpenSensorFault == No && (TrainRadioFault == No && (CrossingRadioFault == No && (RadioInterferenceFault == No && (BarrierMotorFault == No && (HodometerFault == No && (BrakeFault == No && TrainSensorFault == No)))))))) => G ((CrossingControl == Closing && degreeLevel == 1) => X X BarrierClosedSensor == ClosedDetected))","type":"tl"}},{"label":"Der Zug schickt eine Nachricht, wenn er an EP angekommen ist","expression":{"string":"(G (BarrierClosedSensorFault == No && (BarrierOpenSensorFault == No && (TrainRadioFault == No && (CrossingRadioFault == No && (RadioInterferenceFault == No && (BarrierMotorFault == No && (HodometerFault == No && (BrakeFault == No && TrainSensorFault == No)))))))) => F (TrainControl == EP => X TrainRadioModule == Sending))","type":"tl"}},{"label":"Der Zug schickt eine Nachricht, wenn er an AP angekommen ist","expression":{"string":"(G (BarrierClosedSensorFault == No && (BarrierOpenSensorFault == No && (TrainRadioFault == No && (CrossingRadioFault == No && (RadioInterferenceFault == No && (BarrierMotorFault == No && (HodometerFault == No && (BrakeFault == No && TrainSensorFault == No)))))))) => F (TrainControl == AP => X TrainRadioModule == Sending))","type":"tl"}},{"label":"Wenn der Zug den Sensor passiert hat, wird die Schranke geöffnet","expression":{"string":"(G (BarrierClosedSensorFault == No && (BarrierOpenSensorFault == No && (TrainRadioFault == No && (CrossingRadioFault == No && (RadioInterferenceFault == No && (BarrierMotorFault == No && (HodometerFault == No && (BrakeFault == No && TrainSensorFault == No)))))))) => G (TrainSensor == TrainPassed => F BarrierOpenSensor == OpenDetected))","type":"tl"}},{"label":"Wenn der Winkel bei 0 ist, ist die Anlage gesichert","expression":{"string":"(G (BarrierClosedSensorFault == No && (BarrierOpenSensorFault == No && (TrainRadioFault == No && (CrossingRadioFault == No && (RadioInterferenceFault == No && (BarrierMotorFault == No && (HodometerFault == No && (BrakeFault == No && TrainSensorFault == No)))))))) => G ((BarrierMotor == Forward && X degreeLevel == 0) => (F CrossingControl == Safe && F BarrierClosedSensor == ClosedDetected)))","type":"tl"}},{"label":"Wenn die Schranke geschlossen ist, ist sie irgendwann wieder offen","expression":{"string":"(G (BarrierClosedSensorFault == No && (BarrierOpenSensorFault == No && (TrainRadioFault == No && (CrossingRadioFault == No && (RadioInterferenceFault == No && (BarrierMotorFault == No && (HodometerFault == No && (BrakeFault == No && TrainSensorFault == No)))))))) => G (BarrierClosedSensor == ClosedDetected => F BarrierOpenSensor == OpenDetected))","type":"tl"}},{"label":"Wenn wir am Bremseinsatzpunkt sind, ist entweder der Übergang gesichert oder die Bremse aktiv","expression":{"string":"(G (BarrierClosedSensorFault == No && (BarrierOpenSensorFault == No && (TrainRadioFault == No && (CrossingRadioFault == No && (RadioInterferenceFault == No && (BarrierMotorFault == No && (HodometerFault == No && (BrakeFault == No && TrainSensorFault == No)))))))) => G (TrainControl == BEP => (Brake == BrakeActive || BarrierClosedSensor == ClosedDetected)))","type":"tl"}},{"label":"Nach dem Schließen ist der Bahnübergang gesichert","expression":{"string":"(G (BarrierClosedSensorFault == No && (BarrierOpenSensorFault == No && (TrainRadioFault == No && (CrossingRadioFault == No && (RadioInterferenceFault == No && (BarrierMotorFault == No && (HodometerFault == No && (BrakeFault == No && TrainSensorFault == No)))))))) => G (CrossingControl == Closing => F CrossingControl == Safe))","type":"tl"}},{"label":"Wenn der Bahnübergang nicht gesichert ist, kommt der Zug vor dem Gefahrenpunkt zum stehen","expression":{"string":"(G (BarrierClosedSensorFault == No && (BarrierOpenSensorFault == No && (TrainRadioFault == No && (CrossingRadioFault == No && (RadioInterferenceFault == No && (BarrierMotorFault == No && (HodometerFault == No && (BrakeFault == No && TrainSensorFault == No)))))))) => G ((TrainControl == BEP && CrossingControl != Safe) => G position < 0))","type":"tl"}},{"label":"Wenn die Bremse aktiviert wurde, bleibt sie aktiv","expression":{"string":"(G (BarrierClosedSensorFault == No && (BarrierOpenSensorFault == No && (TrainRadioFault == No && (CrossingRadioFault == No && (RadioInterferenceFault == No && (BarrierMotorFault == No && (HodometerFault == No && (BrakeFault == No && TrainSensorFault == No)))))))) => G (Brake == BrakeActive => G Brake == BrakeActive))","type":"tl"}},{"label":"Wenn die Bremse aktiv ist, ist die Geschwindigkeit irgendwann 0","expression":{"string":"(G (BarrierClosedSensorFault == No && (BarrierOpenSensorFault == No && (TrainRadioFault == No && (CrossingRadioFault == No && (RadioInterferenceFault == No && (BarrierMotorFault == No && (HodometerFault == No && (BrakeFault == No && TrainSensorFault == No)))))))) => G (Brake == BrakeActive => F velocity == 0))","type":"tl"}}]}}